# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

--- 
jobs: 
  - 
    job: Build_PRD
    pool: 
      vmImage: "Ubuntu 16.04"
    steps: 
      - 
        inputs: 
          architecture: x64
          versionSpec: 3.5
        task: UsePythonVersion@0
      - 
        displayName: "Install prerequisites"
        script: |
            python -m pip install --upgrade pip setuptools wheel
            pip install -r requirements.txt
            pip install unittest-xml-reporting
      - 
        displayName: "terraform validate"
        inputs: 
          awsCredentials: xxxx
          inlineScript: |
              export ENVIRONMENT=PRD
              make install_terraform_linux
              make terraform_validate
          regionName: us-east-1
          scriptType: inline
          workingDirectory: $(Build.SourcesDirectory)
        task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
      - 
        displayName: "terraform plan"
        inputs: 
          awsCredentials: xxx
          inlineScript: |
              export ENVIRONMENT=PRD
              make terraform_plan
              make terraform_clean
          regionName: us-east-1
          scriptType: inline
          workingDirectory: $(Build.SourcesDirectory)
        task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
      - 
        displayName: "Publish Artifact:"
        inputs: 
          ArtifactName: ~
          PathtoPublish: $(Build.SourcesDirectory)
        task: PublishBuildArtifacts@1
name: "$(MajorVersion).$(MinorVersion).$(PatchVersion).$(Rev:r)"
trigger: 
  branches: 
    include: 
      - master
      - release
variables: 
  MajorVersion: 0
  MinorVersion: 1
  PatchVersion: 0

